{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n\nimport { styled } from '../styles/index.js';\nimport { getSvgStyles } from '../icon/styled-components.js';\n/**\n * Main component container element\n */\n\nexport var Root = styled('ul', {\n  listStyleType: 'none',\n  marginBottom: 0,\n  marginTop: 0,\n  paddingLeft: 0,\n  paddingRight: 0,\n  width: '100%'\n});\nRoot.displayName = \"Root\";\nexport var PanelContainer = styled('li', function (props) {\n  var $expanded = props.$expanded,\n      colors = props.$theme.colors;\n  return {\n    listStyleType: 'none',\n    width: '100%',\n    borderBottomWidth: '1px',\n    borderBottomStyle: 'solid',\n    borderBottomColor: $expanded ? colors.mono500 : colors.mono400\n  };\n});\nPanelContainer.displayName = \"PanelContainer\";\nexport var Header = styled('div', function (props) {\n  var $disabled = props.$disabled,\n      $isFocusVisible = props.$isFocusVisible,\n      _props$$theme = props.$theme,\n      colors = _props$$theme.colors,\n      sizing = _props$$theme.sizing,\n      typography = _props$$theme.typography;\n  return _objectSpread(_objectSpread({}, typography.font350), {}, {\n    color: colors.contentPrimary,\n    cursor: $disabled ? 'not-allowed' : 'pointer',\n    backgroundColor: colors.listHeaderFill,\n    paddingTop: sizing.scale600,\n    paddingBottom: sizing.scale600,\n    paddingLeft: sizing.scale700,\n    paddingRight: sizing.scale700,\n    marginTop: 0,\n    marginBottom: 0,\n    marginLeft: 0,\n    marginRight: 0,\n    display: 'flex',\n    alignItems: 'center',\n    outline: $isFocusVisible ? \"3px solid \".concat(colors.accent) : 'none',\n    outlineOffset: '-3px',\n    justifyContent: 'space-between',\n    ':hover': {\n      color: colors.primary\n    }\n  });\n});\nHeader.displayName = \"Header\";\nexport var ToggleIcon = styled('svg', function (props) {\n  var $theme = props.$theme,\n      $disabled = props.$disabled,\n      $color = props.$color;\n  return _objectSpread(_objectSpread({}, getSvgStyles(props)), {}, {\n    flexShrink: 0,\n    color: $color || $theme.colors.contentPrimary,\n    cursor: $disabled ? 'not-allowed' : 'pointer'\n  });\n});\nToggleIcon.displayName = \"ToggleIcon\";\nexport var ToggleIconGroup = styled('g', function (props) {\n  var $theme = props.$theme,\n      $expanded = props.$expanded;\n  return {\n    transform: $expanded ? 'rotate(0)' : 'rotate(-90deg)',\n    transformOrigin: 'center',\n    transitionProperty: 'transform',\n    transitionDuration: $theme.animation.timing500,\n    transitionTimingFunction: $theme.animation.easeOutQuinticCurve\n  };\n});\nToggleIconGroup.displayName = \"ToggleIconGroup\";\nexport var Content = styled('div', function (props) {\n  var _props$$theme2 = props.$theme,\n      animation = _props$$theme2.animation,\n      colors = _props$$theme2.colors,\n      sizing = _props$$theme2.sizing,\n      typography = _props$$theme2.typography,\n      $expanded = props.$expanded;\n  return _objectSpread(_objectSpread({}, typography.font200), {}, {\n    backgroundColor: colors.listBodyFill,\n    color: colors.contentPrimary,\n    paddingTop: sizing.scale800,\n    paddingBottom: sizing.scale1000,\n    paddingLeft: sizing.scale800,\n    paddingRight: sizing.scale800,\n    marginTop: 0,\n    marginBottom: 0,\n    marginLeft: 0,\n    marginRight: 0,\n    boxSizing: 'border-box',\n    overflow: 'hidden',\n    opacity: $expanded ? 1 : 0,\n    visibility: $expanded ? 'visible' : 'hidden',\n    transitionProperty: 'opacity,visibility',\n    transitionDuration: animation.timing500,\n    transitionDelay: animation.timing200,\n    transitionTimingFunction: animation.easeOutQuinticCurve\n  });\n});\nContent.displayName = \"Content\";\nexport var ContentAnimationContainer = styled('div', function (props) {\n  var $height = props.$height,\n      animation = props.$theme.animation;\n  return {\n    height: \"\".concat($height),\n    overflow: 'hidden',\n    transitionProperty: 'height',\n    transitionDuration: animation.timing500,\n    transitionTimingFunction: animation.easeOutQuinticCurve\n  };\n});\nContentAnimationContainer.displayName = \"ContentAnimationContainer\";","map":null,"metadata":{},"sourceType":"module"}