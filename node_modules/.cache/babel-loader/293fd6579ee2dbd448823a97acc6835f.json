{"ast":null,"code":"var _jsxFileName = \"/Users/abdulwahab/Documents/GitHub/abdul.wahab/src/pages/projects/Projects.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport GithubRepoCard from \"../../components/githubRepoCard/GithubRepoCard\";\nimport Button from \"../../components/button/Button\";\nimport { openSource } from \"../../portfolio\";\nexport default function Projects() {\n  const [repo, setrepo] = useState([]);\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: operation => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(openSource.githubConvertedToken)}`\n          }\n        });\n      }\n    });\n    client.query({\n      query: gql`\n          {\n            repositoryOwner(login: \"${openSource.githubUserName}\") {\n              ... on User {\n                pinnedRepositories(first: 6) {\n                  edges {\n                    node {\n                      nameWithOwner\n                      description\n                      forkCount\n                      stargazers {\n                        totalCount\n                      }\n                      url\n                      id\n                      diskUsage\n                      primaryLanguage {\n                        name\n                        color\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n    }).then(result => {\n      setrepoFunction(result.data.repositoryOwner.pinnedRepositories.edges);\n      console.log(result);\n    });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    id: \"opensource\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"project-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Open Source Projects\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"repo-cards-div-main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, repo.map((v, i) => {\n    return /*#__PURE__*/React.createElement(GithubRepoCard, {\n      repo: v,\n      key: v.node.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 18\n      }\n    });\n  })), /*#__PURE__*/React.createElement(Button, {\n    text: \"More Projects\",\n    className: \"project-button\",\n    href: \"https://github.com/ashutosh1919\",\n    newTab: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/abdulwahab/Documents/GitHub/abdul.wahab/src/pages/projects/Projects.js"],"names":["React","useState","useEffect","ApolloClient","gql","GithubRepoCard","Button","openSource","Projects","repo","setrepo","getRepoData","client","uri","request","operation","setContext","headers","authorization","atob","githubConvertedToken","query","githubUserName","then","result","setrepoFunction","data","repositoryOwner","pinnedRepositories","edges","console","log","array","map","v","i","node","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAO,eAAP;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;;AAIA,WAASA,WAAT,GAAuB;AACrB,UAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;AAC9BU,MAAAA,GAAG,EAAE,gCADyB;AAE9BC,MAAAA,OAAO,EAAGC,SAAD,IAAe;AACtBA,QAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,EAAG,UAASC,IAAI,CAACZ,UAAU,CAACa,oBAAZ,CAAkC;AADxD;AADU,SAArB;AAKD;AAR6B,KAAjB,CAAf;AAWAR,IAAAA,MAAM,CACHS,KADH,CACS;AACLA,MAAAA,KAAK,EAAEjB,GAAI;;sCAEmBG,UAAU,CAACe,cAAe;;;;;;;;;;;;;;;;;;;;;;;;;AAHnD,KADT,EA8BGC,IA9BH,CA8BSC,MAAD,IAAY;AAChBC,MAAAA,eAAe,CAACD,MAAM,CAACE,IAAP,CAAYC,eAAZ,CAA4BC,kBAA5B,CAA+CC,KAAhD,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAZ;AACD,KAjCH;AAkCD;;AAED,WAASC,eAAT,CAAyBO,KAAzB,EAAgC;AAC9BtB,IAAAA,OAAO,CAACsB,KAAD,CAAP;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,EAAE,EAAC,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGvB,IAAI,CAACwB,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClB,wBAAO,oBAAC,cAAD;AAAgB,MAAA,IAAI,EAAED,CAAtB;AAAyB,MAAA,GAAG,EAAEA,CAAC,CAACE,IAAF,CAAOC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CADH,CAFF,eAOE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAE,eADR;AAEE,IAAA,SAAS,EAAC,gBAFZ;AAGE,IAAA,IAAI,EAAC,iCAHP;AAIE,IAAA,MAAM,EAAE,IAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF;AAgBD","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { gql } from \"apollo-boost\";\nimport \"./Project.css\";\nimport GithubRepoCard from \"../../components/githubRepoCard/GithubRepoCard\";\nimport Button from \"../../components/button/Button\";\nimport { openSource } from \"../../portfolio\";\n\nexport default function Projects() {\n  const [repo, setrepo] = useState([]);\n\n  useEffect(() => {\n    getRepoData();\n  }, []);\n\n  function getRepoData() {\n    const client = new ApolloClient({\n      uri: \"https://api.github.com/graphql\",\n      request: (operation) => {\n        operation.setContext({\n          headers: {\n            authorization: `Bearer ${atob(openSource.githubConvertedToken)}`,\n          },\n        });\n      },\n    });\n\n    client\n      .query({\n        query: gql`\n          {\n            repositoryOwner(login: \"${openSource.githubUserName}\") {\n              ... on User {\n                pinnedRepositories(first: 6) {\n                  edges {\n                    node {\n                      nameWithOwner\n                      description\n                      forkCount\n                      stargazers {\n                        totalCount\n                      }\n                      url\n                      id\n                      diskUsage\n                      primaryLanguage {\n                        name\n                        color\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `,\n      })\n      .then((result) => {\n        setrepoFunction(result.data.repositoryOwner.pinnedRepositories.edges);\n        console.log(result);\n      });\n  }\n\n  function setrepoFunction(array) {\n    setrepo(array);\n  }\n\n  return (\n    <div className=\"main\" id=\"opensource\">\n      <h1 className=\"project-title\">Open Source Projects</h1>\n      <div className=\"repo-cards-div-main\">\n        {repo.map((v, i) => {\n          return <GithubRepoCard repo={v} key={v.node.id} />;\n        })}\n      </div>\n      <Button\n        text={\"More Projects\"}\n        className=\"project-button\"\n        href=\"https://github.com/ashutosh1919\"\n        newTab={true}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}